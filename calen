#!/bin/bash
main() {
    utility_selector
}

utility_selector() {
    selected_utility=$(
        zenity --list \
                --title="Utility Selector" \
                --width=400 \
                --height=500 \
                --radiolist \
                --column="" --column="Utilities" \
                False "Date/Time" \
                False "Calendar" \
                False "Delete" \
                False "Operating System Type" \
                False "Computer CPU Informaiton" \
                False "Memory Information" \
                False "Hard Disk Information" \
                False "File System (Mounted)" \
                --cancel-label="Exit" \
                --ok-label="Open"
    )

     case $? in
    0)
        case $selected_utility in
        "Date/Time")
            date_time
            ;;
        "Calendar")
            calendar
            ;;
        "Delete")
            delete_menu
            ;;
        "Operating System Type")
            os_type
            ;;
        "Computer CPU Informaiton")
            cpu_information
            ;;
        "Memory Information")
            memory_info
            ;;
        "Hard Disk Information")
            hdd_info
            ;;
        "File System (Mounted)")
            file_system_type
            ;;
        *)
            zenity --warning \
                --text="Please select an item to continue!"
            main
            ;;
        esac
        ;;
    1)
        exit
        ;;
    esac
}

date_time() {
    (
        while true; do
            echo "# Time: $(date "+%T")  |  DATE: $(date "+%d-%B-%Y")"
            echo "100"
        done
    ) |
        zenity --progress \
            --title="Clock" \
            --text="Date/Time" \
            --percentage=0

    case $? in
    0)
        main
        ;;
    1)
        main
        ;;
    esac
}

calendar() {
    while true
    do
        # Displays the calendar dialog box and store the date chosen in variable $Date
        Date=$(zenity --calendar --text="select a date to add an event" --ok-label "Add event" --cancel-label "cancel" --width=500 --height=300 --title="SELECT A DATE" --date-format='%d.%m.%Y' )
        
        
        #$? = was last command succesfull . Answer is 0 means 'yes ok-label has been selected'. Non-zero values means 'No cancel-label has been selected'
        if [ $? -eq 1 ] ; then 
            break
        fi
        #The file is assigned to variable NAME
        NAME="$Date.txt"
        # check if the file with thay specific date exists
        if [ -f "$NAME" ] ; then
            #if true reminder of that specific date is called and performs what is in the function reminder 
            Reminder "$Date" 
        else
            # if false it displays an entry box and  the user input is stored in variable ADD_EVENT
            ADD_EVENT=$(zenity --entry --title="ADD AN EVENT" --text="Add an event on $Date" --width=500 --height=300)
            #The user input is stored in the file NAME="Date.txt" which is a specific date
            echo "$ADD_EVENT">>"$NAME" 
            Reminder "$Date"
        fi
    done
}

Reminder() {
    while true
        do
        zenity --text-info \
                --title="REMINDER for $Date" \
                --width=500 \
                --height=400 \
                --ok-label="Add New Event" \
                --cancel-label="Go Back" \
                --filename="$1.txt"   # Displays text information dialog 
        
        #check if cancel label has been selected
        if [ $? -eq 1 ] ; then
            #if true exits the loop
            break 
        else
            #displays a text entry dialog  and user input is saved in variable ADD_EVENT
            ADD_EVENT=$(zenity --entry --title="NEW EVENT" --text="Add a new event on $Date" --cancel-label="Go Back" --width=500 --height=300)
            #user input is appended in a file
            echo "$ADD_EVENT">>"$1.txt"
        fi
    done   
}


delete_menu() {
    directory_input=$(
        zenity --entry \
            --title="Directory Path" \
            --text="Enter a directory name (Eg. Desktop):" \
            --entry-text="Desktop"
    )

    case $? in
    0)
        if [ "$directory_input" = "" ]; then
            # in case input is empty do
            file_to_delete=$(file_selector $pwd)
            if [ "$file_to_delete" != false ]; then
                delete_file $file_to_delete
            else
                main
            fi

        else
            # in case input is not empty do
            file_to_delete=$(file_selector $HOME\/$directory_input)
            if [ "$file_to_delete" != false ]; then
                delete_file $file_to_delete
            else
                main
            fi

        fi
        ;;
    1)
        # if cancel button is triggered go back to main menu
        main
        ;;
    esac
}

file_selector() {
    directory=$1
    FILE=$(zenity --file-selection --filename="$directory/" --title="Select a File")

    case $? in
    0)
        echo "$FILE"
        ;;
    1)
        echo false
        ;;
    -1)
        zenity --warning \
            --text="Unexpected error has occurred. Please try again!"
        echo false
        ;;
    esac
}


delete_file() {
    full_path=$1
    initial_directory=$pwd
    file_location="${full_path%/*}/"
    file_name=$(basename ${full_path})

    # prompt user a warning and accepts a confirmation, bool value yes or no
    zenity --question \
        --title="Deleting File" \
        --text="You are about to delete file at path: '$full_path'. \n\n Are you sure you wish to proceed?"

    case $? in
    0)
        # if user input is Yes
        cd $file_location
        rm $file_name
        cd $initial_directory
        ;;
    1)
        # if user input is No, go back to delete_menu
        delete_menu
        ;;
    esac
}

# call main function and pass all command line parameters using "$@" as a list   


os_type() { 
    # The command cat /etc/os-release which enables us to check the operating system is stored in  variable os_information
    os_information=$(cat /etc/os-release)  
    
    # The operating system information is displayed using the info dialog box
    zenity --info \                      
        --title="Operating System Type" \
        --ok-label="Go Back" <<<$os_information
   
   # returns back to main menu when ok-label is selected
    case $? in
    0)
        main
        ;;
    esac
}

cpu_information() {
    #The command lscpu which displays the cpu details is stored in variable cpu_specification
    cpu_specification=$(lscpu)
    
    #Computer cpu information is displayed using the info dialog box
    zenity --info \
        --title="Computer CPU Information" \
        --ok-label="Go Back" <<<$cpu_specification

    case $? in
    0)
        main
        ;;
    esac
}

memory_info() {
    #The command cat /proc/meminfo reports the amount of available and used memory and is stored in variable memory_data
    memory_data=$(cat /proc/meminfo)
    
    #Memory information is displayed using the text dialog box
    zenity --text-info \
        --title="Memory Information" \
        --ok-label="Go Back" <<<$memory_data

    case $? in
    0)
        main
        ;;
    esac
}

# hdd_info() {
#     # TODO
#     # Find a replacement which doesn't require sudo,
#     # or prompt user to enter password to use the following sudo command
#     # sudo hdparm -I /dev/sda
# }



file_system_type() {
    mount_list=$(mount | grep "^/dev")

    zenity --text-info \
        --title="Mounted File System" \
        --ok-label="Go Back" <<<$mount_list

    case $? in
    0)
        main
        ;;
    esac
 }
    # call main function and pass all command line parameters using "$@" as a list
main "$@"









