main() {
    utility_selector
}

utility_selector() {
    selected_utility=$(
        zenity --list \
                --title="Utility Selector" \
                --width=400
                --height=500
                --radiolist \
                --column="" --column="Utilities" \
                False "Date/Time" \
                False "Calendar" \
                False "Delete" \
                --cancel-label="Exit" \
                --ok-label="Open"
    )

    case $selected_utility in
    "Date/Time")
        date_time
        ;;
    "Calendar")
        echo -n "Calendar"
        ;;
    "Delete")
        delete_menu
        ;;
    *)
        echo -n "None Selected"
        ;;
    esac
}


#!/bin/sh

(

while true

do

	echo "# Time: $(date "+%T")  |  DATE: $(date "+%d-%B-%Y")" ;

	echo "100" ;

done

) |

zenity --progress \

  --title="Clock" \

  --text="Date/Time" \

  --percentage=0



if [ "$?" = -1 ] ; then

        zenity --error \

          --text="Update canceled."

fi



Reminder(){
while true
do
  zenity --text-info \
    --title="REMINDER for $Date" \
    --width=500 \
    --height=400 \
    --ok-label="Add New Event" \
    --cancel-label="Go Back" \
   --filename="$1.txt"   # Displays text information dialog 
   
   
   if [ $? -eq 1 ] #check if cancel label has been selected
   then
       break #if true exits the loop
       
   else
       ADD_EVENT=$(zenity --entry --title="NEW EVENT" --text="Add a new event on $Date" --cancel-label="Go Back" --width=500 --height=300) #displays a text entry dialog  and user input is saved in variable ADD_EVENT
       echo "$ADD_EVENT">>"$1.txt" #user input is appended in a file
   fi
done   
}


Calendar(){
while true
do
    Date=$(zenity --calendar --text="select a date to add an event" --ok-label "Add event" --cancel-label "cancel" --width=500 --height=300 --title="SELECT A DATE" --date-format='%d.%m.%Y' ) # Displays the calendar dialog box and store the date chosen in variable $Date
   
   if [ $? -eq 1 ] #$? = was last command succesfull . Answer is 0 means 'yes ok-label has been selected'. Non-zero values means 'No cancel-label has been selected'
   then 
      break
     
   fi       
   NAME="$Date.txt" #The file is assigned to variable NAME
   if [ -f "$NAME" ] # check if the file with thay specific date exists
   then
       Reminder "$Date" #if true reminder of that specific date is called and performs what is in the function reminder 
   else
       ADD_EVENT=$(zenity --entry --title="ADD AN EVENT" --text="Add an event on $Date" --width=500 --height=300) # if false it displays an entry box and    the user input is stored in variable ADD_EVENT
       echo "$ADD_EVENT">>"$NAME" #The user input is stored in the file NAME="Date.txt" which is a specific date
       Reminder "$Date"
   fi
done
}


delete_menu() {
    directory_input=$(
        zenity --entry \
                --title="Directory Path" \
                --text="Enter a directory name (Eg. Desktop):" \
                --entry-text="Desktop"
    );

    case $? in
    0)
        if [ "$directory_input" = "" ]; then
            # in case input is empty do
            file_to_delete=$(file_selector $pwd)
            delete_file $file_to_delete

        else
            # in case input is not empty do
            file_to_delete=$(file_selector $HOME\/$directory_input)
            delete_file $file_to_delete

        fi
        ;;
    1)
        # if cancel button is triggered go back to main menu
        main
        ;;
    esac
}

file_selector() {
    directory=$1
    FILE=`zenity --file-selection --filename="$directory/" --title="Select a File"`

    case $? in
        0)
            echo "$FILE"
            ;;
        1)
            echo "No file selected." # TODO : Prompt User Warning and Go Back to delete_file()
            ;;
        -1)
            echo "An unexpected error has occurred." # TODO : Prompt User about the error and go back to main menu
            ;;
    esac
}

delete_file() {
    initial_directory=$pwd
    full_path=$1
    file_location="${full_path%/*}/"
    file_name=$(basename ${full_path})

    # prompt user a warning and accepts a confirmation, bool value yes or no
    zenity --question \
            --title="Deleting File" \
            --text="You are about to delete file at path: '$full_path'. \n\n Are you sure you wish to proceed?"
case $? in
        0)
            # if user input is Yes
            cd $file_location
            rm $file_name
            cd $initial_directory
            ;;
        1)
            # if user input is No
            echo false # TODO : case false return to file_selector
            ;;
    esac
}

# call main function and pass all command line parameters using "$@" as a list
main "$@"



os_type() {
    os_information=$(cat /etc/os-release)

    zenity --info \
        --title="Operating System Type" \
        --ok-label="Go Back" <<<$os_information

    case $? in
    0)
        main
        ;;
    esac
}

cpu_information() {
    cpu_specification=$(lscpu)

    zenity --info \
        --title="Computer CPU Information" \
        --ok-label="Go Back" <<<$cpu_specification

    case $? in
    0)
        main
        ;;
    esac
}

memory_info() {
    memory_data=$(cat /proc/meminfo)

    zenity --text-info \
        --title="Memory Information" \
        --ok-label="Go Back" <<<$memory_data

    case $? in
    0)
        main
        ;;
    esac
}

# hdd_info() {
#     # TODO
#     # Find a replacement which doesn't require sudo,
#     # or prompt user to enter password to use the following sudo command
#     # sudo hdparm -I /dev/sda
# }



file_system_type() {
    mount_list=$(mount | grep "^/dev")

    zenity --text-info \
        --title="Mounted File System" \
        --ok-label="Go Back" <<<$mount_list

    case $? in
    0)
        main
        ;;
    esac
 }
    # call main function and pass all command line parameters using "$@" as a list
main "$@"










#part2
#!/bin/bash
OS_Type(){                                      #Creating function for The operating system type
zenity --info \                                 #The operating system information is displayed using the info dialog box
       --title "OS TYPE" \
       --width=200 \
       --text "$(cat /etc/os-release)"          #By running the command cat /etc/os-release we can check the operating system
}


CPU_information(){                              #Creating function for Computer cpu information
zenity --info \                                 #Computer cpu information is displayed using the info dialog box
       --title "COMPUTER CPU INFORMATION" \
       --width=500 \
       --text "$(lscpu)"                        #By running the command lscpu it diaplys the cpu details
}


Memory_info(){                                  #Creating function for Memory Information
echo "$(cat /proc/meminfo)" > "memory_info.txt" #The command cat /proc/meminfo reports the amount of available and used memory. The file "memory_info.txt" is created  and store the command information in the file.
zenity --text-info \                            #Memory information is displayed using the text dialog box
--title "MEMORY INFORMATION" \
--filename "memory_info.txt"
}


hdd_info() {
echo "$(cat /proc/scsi/scsi)" > "hardisk.txt"
echo "$(lshw -class storage -class disk)" >> "hardisk.txt"
zenity --text-info \
   --width=800 \
   --height=800 \
   --title "Hard Drive"
}




